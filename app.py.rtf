{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29200\viewh17840\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import streamlit as st\
import pandas as pd\
import random\
from io import BytesIO\
from reportlab.lib.pagesizes import A4\
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\
from reportlab.lib import colors\
from reportlab.lib.styles import getSampleStyleSheet\
\
st.set_page_config(page_title="SmartPlay AI", page_icon="\uc0\u55356 \u57263 ", layout="centered")\
\
# ---------- Links & secrets (set these in Streamlit Cloud > Settings > Secrets) ----------\
STRIPE_LINK = st.secrets.get("STRIPE_LINK", "https://buy.stripe.com/test_123")\
SAMPLE_REPORT_URL = st.secrets.get("SAMPLE_REPORT_URL", "https://example.com/sample.pdf")\
PASSCODE = st.secrets.get("PASSCODE", "")  # simple MVP gate for premium features\
\
# ---------- Demo "latest results" (swap later for live data) ----------\
LOTTO_TODAY = \{"main": \{2,4,5,30,33,37\}, "bonus": 10\}\
SUPER_TODAY = \{"main": \{3,4,18,33,35\}, "sb": 9\}\
PB_TODAY    = \{"whites": \{11,22,33,44,55\}, "pb": 9\}\
\
# ---------- Default sets ----------\
DEFAULT_HOT  = \{8,13,18,27,30,33,38,12,14,21\}\
DEFAULT_COLD = \{1,2,4,5,6,9,10,16,19,37\}\
CLUSTER      = \{2,4,5,37\}\
\
# ---------- helpers ----------\
def choice_unique(rng, start, end, k): return sorted(rng.sample(range(start, end + 1), k))\
\
def lotto_blend(n, seed, hot, cold, min_hot=2, min_cold=2):\
    rng=random.Random(seed); out=[]\
    while len(out)<n:\
        c=choice_unique(rng,1,38,6)\
        if sum(x in hot for x in c)>=min_hot and sum(x in cold for x in c)>=min_cold and c not in out: out.append(c)\
    return out\
\
def lotto_cold(n, seed, cold, min_cold=3, cluster=None):\
    rng=random.Random(seed); out=[]\
    while len(out)<n:\
        c=choice_unique(rng,1,38,6)\
        if sum(x in cold for x in c)>=min_cold and (True if not cluster else any(x in cluster for x in c)) and c not in out: out.append(c)\
    return out\
\
def super_blend(n, seed, hot, cold, min_hot=2, min_cold=1):\
    rng=random.Random(seed); out=[]\
    while len(out)<n:\
        m=choice_unique(rng,1,35,5)\
        if sum(x in hot for x in m)>=min_hot and sum(x in cold for x in m)>=min_cold:\
            sb=rng.randint(1,10); t=(m,sb)\
            if t not in out: out.append(t)\
    return out\
\
def super_cold(n, seed, cold, min_cold=2):\
    rng=random.Random(seed); out=[]\
    while len(out)<n:\
        m=choice_unique(rng,1,35,5)\
        if sum(x in cold for x in m)>=min_cold:\
            sb=rng.randint(1,10); t=(m,sb)\
            if t not in out: out.append(t)\
    return out\
\
def powerball_blend(n, seed, hot, cold, min_hot=2, min_cold=1):\
    rng=random.Random(seed); out=[]\
    while len(out)<n:\
        w=choice_unique(rng,1,69,5)\
        if sum(x in hot for x in w)>=min_hot and sum(x in cold for x in w)>=min_cold:\
            pb=rng.randint(1,26); t=(w,pb)\
            if t not in out: out.append(t)\
    return out\
\
def df_from_tickets(game, tickets):\
    rows=[]\
    for i,t in enumerate(tickets,1):\
        if game=="powerball":\
            rows.append(\{"label":f"PB \{i\}", **\{f"W\{j\}":n for j,n in enumerate(t[0],1)\}, "PB":t[1]\})\
        elif game=="super":\
            rows.append(\{"label":f"Super \{i\}", **\{f"N\{j\}":n for j,n in enumerate(t[0],1)\}, "SB":t[1]\})\
        else:\
            rows.append(\{"label":f"Lotto \{i\}", **\{f"N\{j\}":n for j,n in enumerate(t,1)\}\})\
    return pd.DataFrame(rows)\
\
def make_pdf(game, tickets, title="SmartPlay AI \'96 Print Slip"):\
    buf=BytesIO(); doc=SimpleDocTemplate(buf, pagesize=A4)\
    styles=getSampleStyleSheet()\
    story=[Paragraph(title, styles["Title"]), Spacer(1,10)]\
    rows=[["Label","Numbers","Extra"]]\
    for i,t in enumerate(tickets,1):\
        if game=="powerball": rows.append([f"PB \{i\}", ", ".join(map(str,t[0])), f"PB \{t[1]\}"])\
        elif game=="super":   rows.append([f"Super \{i\}", ", ".join(map(str,t[0])), f"SB \{t[1]\}"])\
        else:                 rows.append([f"Lotto \{i\}", ", ".join(map(str,t)), ""])\
    tbl=Table(rows, colWidths=[90,350,80])\
    tbl.setStyle(TableStyle([\
        ("BACKGROUND",(0,0),(-1,0),colors.HexColor("#003366")),\
        ("TEXTCOLOR",(0,0),(-1,0),colors.white),\
        ("GRID",(0,0),(-1,-1),0.4,colors.grey),\
        ("FONTNAME",(0,0),(-1,0),"Helvetica-Bold"),\
        ("ALIGN",(0,0),(-1,-1),"CENTER"),\
        ("VALIGN",(0,0),(-1,-1),"MIDDLE"),\
    ]))\
    story.append(tbl); doc.build(story); return buf.getvalue()\
\
def eval_lotto(nums):\
    mh=len(set(nums)&LOTTO_TODAY["main"]); bh=LOTTO_TODAY["bonus"] in nums\
    if mh==6: tier="Match 6 (Jackpot)"\
    elif mh==5 and bh: tier="Match 5 + Bonus"\
    elif mh==5: tier="Match 5"\
    elif mh==4 and bh: tier="Match 4 + Bonus"\
    elif mh==4: tier="Match 4"\
    elif mh==3 and bh: tier="Match 3 + Bonus"\
    elif mh==3: tier="Match 3"\
    else: tier=f"Match \{mh\}" + (" + Bonus" if bh else "")\
    payout = 600 if tier=="Match 3" else None\
    return tier, payout\
\
def eval_super(main, sb):\
    mh=len(set(main)&SUPER_TODAY["main"]); s=(sb==SUPER_TODAY["sb"])\
    tier="Match 5 + SB (Jackpot)" if (mh==5 and s) else f"Match \{mh\}" + (" + SB" if s else "")\
    return tier, None\
\
def eval_powerball(whites, pb):\
    mh=len(set(whites)&PB_TODAY["whites"]); s=(pb==PB_TODAY["pb"])\
    return f"Match \{mh\}" + (" + PB" if s else ""), None\
\
# ---------- UI ----------\
st.title("SmartPlay AI \uc0\u55356 \u57263 ")\
st.caption("Jamaica Lotto \'95 Super Lotto \'95 Powerball")\
st.write(\
    f"**New here?** \uc0\u55357 \u56393  [Download Sample Report](\{SAMPLE_REPORT_URL\}) \'b7 "\
    f"[Subscribe for Premium Packs](\{STRIPE_LINK\})"\
)\
\
with st.sidebar:\
    st.subheader("Generator")\
    game = st.selectbox("Game", ["lotto","super","powerball"])\
    strategy = st.selectbox("Strategy", ["blend","cold"])\
    count = st.number_input("Tickets", 1, 20, 7 if game=="lotto" else 1 if game=="super" else 5)\
    seed = st.number_input("Seed (reproducible)", 1, 999999999, 20250831)\
\
    st.markdown("---")\
    st.subheader("Premium Access (optional)")\
    code = st.text_input("Subscriber passcode", type="password")\
    is_premium = (PASSCODE and code == PASSCODE)\
\
    st.markdown("---")\
    run = st.button("Generate")\
\
if run:\
    if game=="lotto":\
        tickets = lotto_blend(count, seed, DEFAULT_HOT, DEFAULT_COLD) if strategy=="blend" \\\
                  else lotto_cold(count, seed, DEFAULT_COLD, 3, CLUSTER)\
    elif game=="super":\
        tickets = super_blend(count, seed, DEFAULT_HOT, DEFAULT_COLD) if strategy=="blend" \\\
                  else super_cold(count, seed, DEFAULT_COLD)\
    else:\
        tickets = powerball_blend(count, seed, DEFAULT_HOT, DEFAULT_COLD)\
\
    if is_premium:\
        if game=="lotto":\
            tickets += lotto_cold(max(1, count//2), seed+11, DEFAULT_COLD, 3, CLUSTER)\
        elif game=="super":\
            tickets += super_blend(1, seed+22, DEFAULT_HOT, DEFAULT_COLD)\
        else:\
            tickets += powerball_blend(1, seed+33, DEFAULT_HOT, DEFAULT_COLD)\
\
    df = df_from_tickets(game, tickets)\
    st.subheader("Your Tickets")\
    st.dataframe(df, use_container_width=True)\
\
    csv = df.to_csv(index=False).encode()\
    st.download_button("Download CSV", csv, "tickets.csv", "text/csv")\
\
    pdf_bytes = make_pdf(game, tickets)\
    st.download_button("Download Print Slip (PDF)", pdf_bytes, "slip.pdf", "application/pdf")\
\
    st.divider()\
    st.subheader("Evaluate vs. Latest Results (demo)")\
    rows=[]\
    for i,t in enumerate(tickets,1):\
        if game=="powerball": tier,pay = eval_powerball(t[0], t[1])\
        elif game=="super":   tier,pay = eval_super(t[0], t[1])\
        else:                 tier,pay = eval_lotto(t)\
        rows.append(\{"ticket": i, "tier": tier, "payout(JMD)": pay\})\
    st.table(pd.DataFrame(rows))\
\
st.write("---")\
st.caption("Analytics only \'95 No guaranteed outcomes \'95 18+ \'95 Play responsibly.")\
}